# PEG for awless template syntax
package ast

type Peg Peg {
 *AST
}

Script   <- (BlankLine* Statement BlankLine*)+ WhiteSpacing EndOfFile
Statement <- { p.NewStatement() } WhiteSpacing (CmdExpr / Declaration / Comment) WhiteSpacing EndOfLine* { p.StatementDone() }
Action <- [a-z]+
Entity <- [a-z0-9]+
Declaration <- <Identifier> { p.addDeclarationIdentifier(text) }
               Equal
               ( CmdExpr / ValueExpr )
ValueExpr <- { p.addValue() } CompositeValue
CmdExpr <- <Action> { p.addAction(text) }
        MustWhiteSpacing <Entity> { p.addEntity(text) }
        (MustWhiteSpacing Params)?

Params <- Param+
Param <- <Identifier> { p.addParamKey(text) }
         Equal
         CompositeValue
         WhiteSpacing

Identifier <- [a-zA-Z0-9-_.]+

CompositeValue <- ListValue / ListWithoutSquareBrackets / Value

ListValue <- {  p.addFirstValueInList() } '[' (WhiteSpacing Value WhiteSpacing)?
            (',' WhiteSpacing Value WhiteSpacing )* ']' {  p.lastValueInList() }
            
ListWithoutSquareBrackets <- {  p.addFirstValueInList() } (WhiteSpacing Value WhiteSpacing)
                        (',' WhiteSpacing Value WhiteSpacing )+ {  p.lastValueInList() }

NoRefValue <- ConcatenationValue
        / HoleWithSuffixValue
        / HoleValue
        / HolesStringValue
        / AliasValue {  p.addAliasParam(text) }
        / DoubleQuote CustomTypedValue DoubleQuote
        / SingleQuote CustomTypedValue SingleQuote
        / CustomTypedValue
        / QuotedStringValue
        / UnquotedParamValue

Value <- RefValue {  p.addParamRefValue(text) }
      / NoRefValue
        
CustomTypedValue <- <IntRangeValue> { p.addParamValue(text) }

UnquotedParamValue <- <UnquotedParam> { p.addParamValue(text) }
UnquotedParam <- [a-zA-Z0-9-._:/+;~@<>*]+ # This regex is in sync with template/internal/ast.simpleStringValue

ConcatenationValue <- { p.addFirstValueInConcatenation() } HoleValue ( WhiteSpacing '+' WhiteSpacing (QuotedStringValue / HoleValue))+ {  p.lastValueInConcatenation() }
        / { p.addFirstValueInConcatenation() } QuotedStringValue ( WhiteSpacing '+' WhiteSpacing (QuotedStringValue / HoleValue))+ {  p.lastValueInConcatenation() }

QuotedStringValue <- QuotedString { p.addStringValue(text) }
QuotedString <- DoubleQuotedValue / SingleQuotedValue

DoubleQuotedValue <- DoubleQuote <[^"]*> DoubleQuote
SingleQuotedValue <- SingleQuote <[^']*> SingleQuote

IntRangeValue <- [0-9]+'-'[0-9]+

RefValue <- '$'<Identifier>
AliasValue <- '@'<UnquotedParam> / '@' DoubleQuotedValue / '@' SingleQuotedValue
HoleValue <- Hole {  p.addParamHoleValue(text) }
Hole <- '{'WhiteSpacing<Identifier>WhiteSpacing'}'
HolesStringValue <- { p.addFirstValueInConcatenation() } <(UnquotedParamValue? HoleValue UnquotedParamValue?)+> {  p.lastValueInConcatenation() }
HoleWithSuffixValue <- { p.addFirstValueInConcatenation() } <HoleValue UnquotedParamValue+ (UnquotedParamValue? HoleValue UnquotedParamValue?)*> {  p.lastValueInConcatenation() }

Comment <- '#'(!EndOfLine .)* / '//'(!EndOfLine .)*

SingleQuote <- '\''
DoubleQuote <- '"'

WhiteSpacing <- Whitespace*
MustWhiteSpacing <- Whitespace+
Equal <- WhiteSpacing '=' WhiteSpacing
BlankLine <- WhiteSpacing EndOfLine
Whitespace   <- ' ' / '\t'
EndOfLine <- '\r\n' / '\n' / '\r'
EndOfFile <- !.
